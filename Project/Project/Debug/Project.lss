
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7f  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000933  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a02  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  000026f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000073b0  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000821  00000000  00000000  00009c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000a431  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002aea  00000000  00000000  0000a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1e d1       	rcall	.+572    	; 0x2d6 <main>
  9a:	21 c1       	rjmp	.+578    	; 0x2de <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GLCD_Read>:
 }

 unsigned short GLCD_Read(unsigned short column)
 {
	 unsigned short read_data = 0; //Read data here
	 DDRA = 0x00;     //PORTD as Input
  9e:	1a ba       	out	0x1a, r1	; 26
	 PORTE |= BIT(4);             //Read
  a0:	1c 9a       	sbi	0x03, 4	; 3
	 PORTE |= BIT(5);            //Data
  a2:	1d 9a       	sbi	0x03, 5	; 3

	 if(column >63){
  a4:	80 34       	cpi	r24, 0x40	; 64
  a6:	91 05       	cpc	r25, r1
  a8:	18 f0       	brcs	.+6      	; 0xb0 <GLCD_Read+0x12>
	  PORTE |= BIT(2);
  aa:	1a 9a       	sbi	0x03, 2	; 3
	  PORTE &= ~BIT(3);
  ac:	1b 98       	cbi	0x03, 3	; 3
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GLCD_Read+0x16>
	 }else {
		PORTE &= ~BIT(2);
  b0:	1a 98       	cbi	0x03, 2	; 3
		PORTE |= BIT(3);
  b2:	1b 9a       	sbi	0x03, 3	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <GLCD_Read+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <GLCD_Read+0x1e>
	 }

	 _delay_us(1);
	 PORTE |= BIT(6);
  bc:	1e 9a       	sbi	0x03, 6	; 3
  be:	92 e0       	ldi	r25, 0x02	; 2
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <GLCD_Read+0x22>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <GLCD_Read+0x28>
	 _delay_us(1);

	 //dummy reead
	 PORTE &= ~BIT(6);
  c6:	1e 98       	cbi	0x03, 6	; 3
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <GLCD_Read+0x2c>
  ce:	00 00       	nop
	 _delay_us(5);

	 PORTE |= BIT(6);
  d0:	1e 9a       	sbi	0x03, 6	; 3
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	9a 95       	dec	r25
  d6:	f1 f7       	brne	.-4      	; 0xd4 <GLCD_Read+0x36>
  d8:	00 c0       	rjmp	.+0      	; 0xda <GLCD_Read+0x3c>
	_delay_us(1);
	 
	 read_data = PINA;    //Input data
  da:	89 b3       	in	r24, 0x19	; 25
	 PORTB = read_data;
  dc:	88 bb       	out	0x18, r24	; 24

	 PORTE &= ~BIT(6);    //Low Enable to remove data from the bus
  de:	1e 98       	cbi	0x03, 6	; 3
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	9a 95       	dec	r25
  e4:	f1 f7       	brne	.-4      	; 0xe2 <GLCD_Read+0x44>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <GLCD_Read+0x4a>
	 _delay_us(1);        //tdhr
	 DDRA = 0xFF;     //Output again
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	9a bb       	out	0x1a, r25	; 26
	 return read_data;
 }
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

000000f0 <EnableCmd>:

 void EnableCmd(){
	PORTE |= BIT(6);
  f0:	1e 9a       	sbi	0x03, 6	; 3
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <EnableCmd+0x4>
  f8:	00 00       	nop

	_delay_us(5);

	PORTE &= ~BIT(6);
  fa:	1e 98       	cbi	0x03, 6	; 3
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <EnableCmd+0xe>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <GLCD_Write>:

 }

 void GLCD_Write(unsigned short b)
 {
	 PORTE |= BIT(4);                  //RS low --> command
 106:	1c 9a       	sbi	0x03, 4	; 3
	 PORTE &= ~BIT(5);                 //RW low --> write
 108:	1d 98       	cbi	0x03, 5	; 3
	 PORTA = b;            //put data on data port
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <GLCD_Write+0x8>
 112:	00 c0       	rjmp	.+0      	; 0x114 <GLCD_Write+0xe>
	 _delay_us(1);
	 EnableCmd();
 114:	ed cf       	rjmp	.-38     	; 0xf0 <EnableCmd>
 116:	08 95       	ret

00000118 <DisplayOn>:
 }


 void DisplayOn(){
	PORTE &= ~BIT(2);                  //RS low --> command
 118:	1a 98       	cbi	0x03, 2	; 3
	PORTE &= ~BIT(3);                 //RW low --> write
 11a:	1b 98       	cbi	0x03, 3	; 3
	 
	PORTE &= ~BIT(4);                  //RS low --> command
 11c:	1c 98       	cbi	0x03, 4	; 3
	PORTE &= ~BIT(5);                 //RW low --> write
 11e:	1d 98       	cbi	0x03, 5	; 3
	  
	PORTA = 0x3F;	
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	8b bb       	out	0x1b, r24	; 27
	EnableCmd();
 124:	e5 cf       	rjmp	.-54     	; 0xf0 <EnableCmd>
 126:	08 95       	ret

00000128 <GOTO_COL>:
 }

 void GOTO_COL(unsigned int x)
 {
	 unsigned short Col_Data;
	 PORTE &= ~BIT(4);                  //RS low --> command
 128:	1c 98       	cbi	0x03, 4	; 3
	 PORTE &= ~BIT(5);                 //RW low --> write
 12a:	1d 98       	cbi	0x03, 5	; 3
	 if(x<64)             //left section
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	91 05       	cpc	r25, r1
 130:	18 f4       	brcc	.+6      	; 0x138 <GOTO_COL+0x10>
	 {
		 PORTE &= ~BIT(2);          //select chip 1
 132:	1a 98       	cbi	0x03, 2	; 3
		 PORTE |= BIT(3);         //deselect chip 2
 134:	1b 9a       	sbi	0x03, 3	; 3
 136:	04 c0       	rjmp	.+8      	; 0x140 <GOTO_COL+0x18>
		 Col_Data = x;              //put column address on data port
	 }
	 else                 //right section
	 { 
		 PORTE |= BIT(2);          //select chip 1
 138:	1a 9a       	sbi	0x03, 2	; 3
		 PORTE &= ~BIT(3);
 13a:	1b 98       	cbi	0x03, 3	; 3
		 Col_Data = x-64;   //put column address on data port
 13c:	80 54       	subi	r24, 0x40	; 64
 13e:	91 09       	sbc	r25, r1
	 }
	 Col_Data = (Col_Data | 0x40 ) & 0x7F;  //Command format
	 PORTA = Col_Data;
 140:	8f 73       	andi	r24, 0x3F	; 63
 142:	99 27       	eor	r25, r25
 144:	80 64       	ori	r24, 0x40	; 64
 146:	8b bb       	out	0x1b, r24	; 27
	 EnableCmd();
 148:	d3 cf       	rjmp	.-90     	; 0xf0 <EnableCmd>
 14a:	08 95       	ret

0000014c <GOTO_ROW>:
 }

 void GOTO_ROW(unsigned int y)
 {
	 unsigned short Col_Data;
	 PORTE &= ~BIT(4);                  //RS low --> command
 14c:	1c 98       	cbi	0x03, 4	; 3
	 PORTE &= ~BIT(5);                 //RW low --> write
 14e:	1d 98       	cbi	0x03, 5	; 3
	 Col_Data = (y | 0xB8 ) & 0xBF; //put row address on data port set command
	 PORTA = Col_Data;
 150:	87 70       	andi	r24, 0x07	; 7
 152:	99 27       	eor	r25, r25
 154:	88 6b       	ori	r24, 0xB8	; 184
 156:	8b bb       	out	0x1b, r24	; 27
	 EnableCmd();	
 158:	cb cf       	rjmp	.-106    	; 0xf0 <EnableCmd>
 15a:	08 95       	ret

0000015c <GOTO_XY>:
		 GLCD_Clrln(m);
	 }
 }

 void GOTO_XY(unsigned int x,unsigned int y)
 {
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	eb 01       	movw	r28, r22
	 GOTO_COL(x);
 162:	e2 df       	rcall	.-60     	; 0x128 <GOTO_COL>
	 GOTO_ROW(y);
 164:	ce 01       	movw	r24, r28
 166:	f2 df       	rcall	.-28     	; 0x14c <GOTO_ROW>
 }
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <Draw_Point>:

 void EnableCmd(void);


 void Draw_Point(unsigned short x,unsigned short y, unsigned short color)
 {
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	8c 01       	movw	r16, r24
 180:	eb 01       	movw	r28, r22
 182:	6a 01       	movw	r12, r20
	 int Col_Data = 0;
	 GOTO_XY(x,(y/8));
 184:	7b 01       	movw	r14, r22
 186:	f6 94       	lsr	r15
 188:	e7 94       	ror	r14
 18a:	f6 94       	lsr	r15
 18c:	e7 94       	ror	r14
 18e:	f6 94       	lsr	r15
 190:	e7 94       	ror	r14
 192:	b7 01       	movw	r22, r14
 194:	e3 df       	rcall	.-58     	; 0x15c <GOTO_XY>
	 switch (color)
 196:	c1 14       	cp	r12, r1
 198:	d1 04       	cpc	r13, r1
 19a:	21 f0       	breq	.+8      	; 0x1a4 <Draw_Point+0x36>
 19c:	ca 94       	dec	r12
 19e:	cd 28       	or	r12, r13
 1a0:	91 f0       	breq	.+36     	; 0x1c6 <Draw_Point+0x58>
 1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <Draw_Point+0x76>
	 {
		 case 0:         //Light spot
		 Col_Data = ~(1<<(y%8)) & GLCD_Read(x);
 1a4:	c8 01       	movw	r24, r16
 1a6:	7b df       	rcall	.-266    	; 0x9e <GLCD_Read>
 1a8:	9e 01       	movw	r18, r28
 1aa:	27 70       	andi	r18, 0x07	; 7
 1ac:	33 27       	eor	r19, r19
 1ae:	c1 e0       	ldi	r28, 0x01	; 1
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <Draw_Point+0x4a>
 1b4:	cc 0f       	add	r28, r28
 1b6:	dd 1f       	adc	r29, r29
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <Draw_Point+0x46>
 1bc:	c0 95       	com	r28
 1be:	d0 95       	com	r29
 1c0:	c8 23       	and	r28, r24
 1c2:	d9 23       	and	r29, r25
		 break;
		 case 1:         //Dark spot
		 Col_Data = (1<<(y%8)) | GLCD_Read(x);
 1c4:	11 c0       	rjmp	.+34     	; 0x1e8 <Draw_Point+0x7a>
 1c6:	c8 01       	movw	r24, r16
 1c8:	6a df       	rcall	.-300    	; 0x9e <GLCD_Read>
 1ca:	9e 01       	movw	r18, r28
 1cc:	27 70       	andi	r18, 0x07	; 7
 1ce:	33 27       	eor	r19, r19
 1d0:	c1 e0       	ldi	r28, 0x01	; 1
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <Draw_Point+0x6c>
 1d6:	cc 0f       	add	r28, r28
 1d8:	dd 1f       	adc	r29, r29
 1da:	2a 95       	dec	r18
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <Draw_Point+0x68>
 1de:	c8 2b       	or	r28, r24
 1e0:	d9 2b       	or	r29, r25
		 break;
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Draw_Point+0x7a>
 void EnableCmd(void);


 void Draw_Point(unsigned short x,unsigned short y, unsigned short color)
 {
	 int Col_Data = 0;
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
		 break;
		 case 1:         //Dark spot
		 Col_Data = (1<<(y%8)) | GLCD_Read(x);
		 break;
	 }
	 GOTO_XY(x,(y/8));
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	b7 01       	movw	r22, r14
 1ea:	c8 01       	movw	r24, r16
	 GLCD_Write(Col_Data);
 1ec:	b7 df       	rcall	.-146    	; 0x15c <GOTO_XY>
 1ee:	ce 01       	movw	r24, r28
 1f0:	8a df       	rcall	.-236    	; 0x106 <GLCD_Write>
 }
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

00000204 <GLCD_Clrln>:
	 PORTA = Col_Data;
	 EnableCmd();	
 }

 void GLCD_Clrln(unsigned short ln)
 {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
	 int i;
	 GOTO_XY(0,ln);      //At start of line of left side
 20a:	bc 01       	movw	r22, r24
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	a5 df       	rcall	.-182    	; 0x15c <GOTO_XY>
	 GOTO_XY(64,ln);     //At start of line of right side (Problem)
 212:	be 01       	movw	r22, r28
 214:	80 e4       	ldi	r24, 0x40	; 64
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	a1 df       	rcall	.-190    	; 0x15c <GOTO_XY>
	 PORTE &= ~BIT(2);
 21a:	1a 98       	cbi	0x03, 2	; 3
 21c:	c1 e4       	ldi	r28, 0x41	; 65
 21e:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<65;i++)
	 GLCD_Write(0);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	70 df       	rcall	.-288    	; 0x106 <GLCD_Write>
 226:	21 97       	sbiw	r28, 0x01	; 1
 {
	 int i;
	 GOTO_XY(0,ln);      //At start of line of left side
	 GOTO_XY(64,ln);     //At start of line of right side (Problem)
	 PORTE &= ~BIT(2);
	 for(i=0;i<65;i++)
 228:	d9 f7       	brne	.-10     	; 0x220 <GLCD_Clrln+0x1c>
	 GLCD_Write(0);
 }
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <GLCD_CLR>:
	PORTA = 0x3F;	
	EnableCmd();
 }

 void GLCD_CLR()
 {
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	 unsigned short m;
	 for(m=0;m<8;m++){
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
		 GLCD_Clrln(m);
 238:	ce 01       	movw	r24, r28
 23a:	e4 df       	rcall	.-56     	; 0x204 <GLCD_Clrln>
 }

 void GLCD_CLR()
 {
	 unsigned short m;
	 for(m=0;m<8;m++){
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	c8 30       	cpi	r28, 0x08	; 8
 240:	d1 05       	cpc	r29, r1
 242:	d1 f7       	brne	.-12     	; 0x238 <GLCD_CLR+0x8>
		 GLCD_Clrln(m);
	 }
 }
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <Set_Start_Line>:
	 GLCD_Write(0);
 }

 void Set_Start_Line(unsigned short line)
 {
	 PORTE &= ~BIT(4);                  //RS low --> command
 24a:	1c 98       	cbi	0x03, 4	; 3
	 PORTE &= ~BIT(5);                 //RW low --> write
 24c:	1d 98       	cbi	0x03, 5	; 3
	 //Activate both chips
	 PORTE &= ~BIT(2);                  //RS low --> command
 24e:	1a 98       	cbi	0x03, 2	; 3
	 PORTE &= ~BIT(3);                 //RW low --> write
 250:	1b 98       	cbi	0x03, 3	; 3
	 PORTA = 0xC0 | line;     //Set Start Line command
 252:	80 6c       	ori	r24, 0xC0	; 192
 254:	8b bb       	out	0x1b, r24	; 27
	 EnableCmd();
 256:	4c cf       	rjmp	.-360    	; 0xf0 <EnableCmd>
 258:	08 95       	ret

0000025a <initTouch>:
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

 void initTouch(){
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
	DDRA = 0xFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0xFF;
 266:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;
 268:	87 bb       	out	0x17, r24	; 23

	PORTE |= BIT(2);
 26a:	1a 9a       	sbi	0x03, 2	; 3
	PORTE |= BIT(3);
 26c:	1b 9a       	sbi	0x03, 3	; 3

	PORTE |= BIT(7);
 26e:	1f 9a       	sbi	0x03, 7	; 3

	DisplayOn();
 270:	53 df       	rcall	.-346    	; 0x118 <DisplayOn>
	GLCD_CLR();
 272:	de df       	rcall	.-68     	; 0x230 <GLCD_CLR>
 274:	00 e0       	ldi	r16, 0x00	; 0

	
	int y;
	int x;

	for(y=0; y<64; y++){
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	0f c0       	rjmp	.+30     	; 0x298 <initTouch+0x3e>
 27a:	b8 01       	movw	r22, r16
		for (x=0; x<128; x++){
			GOTO_XY(x,y);
 27c:	ce 01       	movw	r24, r28
 27e:	6e df       	rcall	.-292    	; 0x15c <GOTO_XY>
 280:	80 e0       	ldi	r24, 0x00	; 0
			GLCD_Write(0x00);
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	40 df       	rcall	.-384    	; 0x106 <GLCD_Write>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	c0 38       	cpi	r28, 0x80	; 128
	
	int y;
	int x;

	for(y=0; y<64; y++){
		for (x=0; x<128; x++){
 28a:	d1 05       	cpc	r29, r1
 28c:	b1 f7       	brne	.-20     	; 0x27a <initTouch+0x20>
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	1f 4f       	sbci	r17, 0xFF	; 255

	
	int y;
	int x;

	for(y=0; y<64; y++){
 292:	00 34       	cpi	r16, 0x40	; 64
 294:	11 05       	cpc	r17, r1
 296:	19 f0       	breq	.+6      	; 0x29e <initTouch+0x44>
 298:	c0 e0       	ldi	r28, 0x00	; 0
 29a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

 void initTouch(){
 29c:	ee cf       	rjmp	.-36     	; 0x27a <initTouch+0x20>
 29e:	80 e0       	ldi	r24, 0x00	; 0
			GOTO_XY(x,y);
			GLCD_Write(0x00);
		}
	}

	Set_Start_Line(0);
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	d3 df       	rcall	.-90     	; 0x24a <Set_Start_Line>
 2a4:	00 e0       	ldi	r16, 0x00	; 0
 2a6:	10 e0       	ldi	r17, 0x00	; 0
	for(y=0; y<64; y+=2){
 2a8:	0e c0       	rjmp	.+28     	; 0x2c6 <initTouch+0x6c>
 2aa:	41 e0       	ldi	r20, 0x01	; 1
		for (x=0; x<128; x+=2){
			Draw_Point(x, y, 1);
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	b8 01       	movw	r22, r16
 2b0:	ce 01       	movw	r24, r28
 2b2:	5d df       	rcall	.-326    	; 0x16e <Draw_Point>
 2b4:	22 96       	adiw	r28, 0x02	; 2
 2b6:	c0 38       	cpi	r28, 0x80	; 128
		}
	}

	Set_Start_Line(0);
	for(y=0; y<64; y+=2){
		for (x=0; x<128; x+=2){
 2b8:	d1 05       	cpc	r29, r1
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <initTouch+0x50>
 2bc:	0e 5f       	subi	r16, 0xFE	; 254
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
			GLCD_Write(0x00);
		}
	}

	Set_Start_Line(0);
	for(y=0; y<64; y+=2){
 2c0:	00 34       	cpi	r16, 0x40	; 64
 2c2:	11 05       	cpc	r17, r1
 2c4:	19 f0       	breq	.+6      	; 0x2cc <initTouch+0x72>
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0

	
	int y;
	int x;

	for(y=0; y<64; y++){
 2ca:	ef cf       	rjmp	.-34     	; 0x2aa <initTouch+0x50>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
		for (x=0; x<128; x+=2){
			Draw_Point(x, y, 1);
		}
	}
		
 }
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <main>:
 2d6:	c1 df       	rcall	.-126    	; 0x25a <initTouch>
 2d8:	80 e0       	ldi	r24, 0x00	; 0


int main (void)
{
	initTouch();
}
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	08 95       	ret

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
