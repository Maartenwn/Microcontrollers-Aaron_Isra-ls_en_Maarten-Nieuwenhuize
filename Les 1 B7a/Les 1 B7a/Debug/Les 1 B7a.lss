
Les 1 B7a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000002d6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5c  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ec  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000603  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000078c3  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000330  00000000  00000000  000097c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00009af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000436  00000000  00000000  00009b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	b8 d0       	rcall	.+368    	; 0x224 <main>
  b4:	0e c1       	rjmp	.+540    	; 0x2d2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <handleD5>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}


void handleD5(STATE *currentState){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	dc 01       	movw	r26, r24
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D5){
			int i = 0;
			EVENTS *next = &currentState->events[index].trigger;
			for(i = 0; i < 5; i++){
				if(currentState->events[index].next == states[i].state){
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e4:	fd 01       	movw	r30, r26
  e6:	bd 01       	movw	r22, r26
  e8:	6a 5f       	subi	r22, 0xFA	; 250
  ea:	7f 4f       	sbci	r23, 0xFF	; 255


void handleD5(STATE *currentState){
	int index; 
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D5){
  ec:	92 81       	ldd	r25, Z+2	; 0x02
  ee:	91 30       	cpi	r25, 0x01	; 1
  f0:	21 f5       	brne	.+72     	; 0x13a <handleD5+0x60>
			int i = 0;
			EVENTS *next = &currentState->events[index].trigger;
			for(i = 0; i < 5; i++){
				if(currentState->events[index].next == states[i].state){
  f2:	41 81       	ldd	r20, Z+1	; 0x01
  f4:	48 17       	cp	r20, r24
  f6:	41 f0       	breq	.+16     	; 0x108 <handleD5+0x2e>
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d1 e0       	ldi	r29, 0x01	; 1
	int index; 
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D5){
			int i = 0;
			EVENTS *next = &currentState->events[index].trigger;
			for(i = 0; i < 5; i++){
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
				if(currentState->events[index].next == states[i].state){
 100:	9f 81       	ldd	r25, Y+7	; 0x07
 102:	94 13       	cpse	r25, r20
 104:	14 c0       	rjmp	.+40     	; 0x12e <handleD5+0x54>
 106:	02 c0       	rjmp	.+4      	; 0x10c <handleD5+0x32>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
					*currentState = states[i];
 10c:	f9 01       	movw	r30, r18
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e2 1b       	sub	r30, r18
 11c:	f3 0b       	sbc	r31, r19
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	01 90       	ld	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	8a 95       	dec	r24
 12a:	e1 f7       	brne	.-8      	; 0x124 <handleD5+0x4a>
					return;
 12c:	0a c0       	rjmp	.+20     	; 0x142 <handleD5+0x68>
	int index; 
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D5){
			int i = 0;
			EVENTS *next = &currentState->events[index].trigger;
			for(i = 0; i < 5; i++){
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	27 96       	adiw	r28, 0x07	; 7
 134:	25 30       	cpi	r18, 0x05	; 5
 136:	31 05       	cpc	r19, r1
 138:	19 f7       	brne	.-58     	; 0x100 <handleD5+0x26>
 13a:	32 96       	adiw	r30, 0x02	; 2
}


void handleD5(STATE *currentState){
	int index; 
	for(index = 0; index < 3; index++){
 13c:	e6 17       	cp	r30, r22
 13e:	f7 07       	cpc	r31, r23
 140:	a9 f6       	brne	.-86     	; 0xec <handleD5+0x12>
					return;
				}
			}
		}
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <handleD6>:

void handleD6(STATE *currentState){
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	dc 01       	movw	r26, r24
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D6){
			int i = 0;
			for(i = 0; i < 5; i++){
				if(currentState->events[index].next == states[i].state){
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 152:	fd 01       	movw	r30, r26
 154:	bd 01       	movw	r22, r26
 156:	6a 5f       	subi	r22, 0xFA	; 250
 158:	7f 4f       	sbci	r23, 0xFF	; 255
}

void handleD6(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D6){
 15a:	92 81       	ldd	r25, Z+2	; 0x02
 15c:	92 30       	cpi	r25, 0x02	; 2
 15e:	21 f5       	brne	.+72     	; 0x1a8 <handleD6+0x60>
			int i = 0;
			for(i = 0; i < 5; i++){
				if(currentState->events[index].next == states[i].state){
 160:	41 81       	ldd	r20, Z+1	; 0x01
 162:	48 17       	cp	r20, r24
 164:	41 f0       	breq	.+16     	; 0x176 <handleD6+0x2e>
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d1 e0       	ldi	r29, 0x01	; 1
void handleD6(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D6){
			int i = 0;
			for(i = 0; i < 5; i++){
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
				if(currentState->events[index].next == states[i].state){
 16e:	9f 81       	ldd	r25, Y+7	; 0x07
 170:	94 13       	cpse	r25, r20
 172:	14 c0       	rjmp	.+40     	; 0x19c <handleD6+0x54>
 174:	02 c0       	rjmp	.+4      	; 0x17a <handleD6+0x32>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
					*currentState = states[i];
 17a:	f9 01       	movw	r30, r18
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	e2 1b       	sub	r30, r18
 18a:	f3 0b       	sbc	r31, r19
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	01 90       	ld	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	8a 95       	dec	r24
 198:	e1 f7       	brne	.-8      	; 0x192 <handleD6+0x4a>
					return;
 19a:	0a c0       	rjmp	.+20     	; 0x1b0 <handleD6+0x68>
void handleD6(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D6){
			int i = 0;
			for(i = 0; i < 5; i++){
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	27 96       	adiw	r28, 0x07	; 7
 1a2:	25 30       	cpi	r18, 0x05	; 5
 1a4:	31 05       	cpc	r19, r1
 1a6:	19 f7       	brne	.-58     	; 0x16e <handleD6+0x26>
 1a8:	32 96       	adiw	r30, 0x02	; 2
	}
}

void handleD6(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
 1aa:	e6 17       	cp	r30, r22
 1ac:	f7 07       	cpc	r31, r23
 1ae:	a9 f6       	brne	.-86     	; 0x15a <handleD6+0x12>
					return;
				}
			}
		}
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <handleD7>:

void handleD7(STATE *currentState){
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	dc 01       	movw	r26, r24
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D7){
			int i = 0;
			for(i = 0; i < 5; i++){
				if(currentState->events[index].next == states[i].state){
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c0:	fd 01       	movw	r30, r26
 1c2:	bd 01       	movw	r22, r26
 1c4:	6a 5f       	subi	r22, 0xFA	; 250
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
}

void handleD7(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D7){
 1c8:	92 81       	ldd	r25, Z+2	; 0x02
 1ca:	93 30       	cpi	r25, 0x03	; 3
 1cc:	21 f5       	brne	.+72     	; 0x216 <handleD7+0x60>
			int i = 0;
			for(i = 0; i < 5; i++){
				if(currentState->events[index].next == states[i].state){
 1ce:	41 81       	ldd	r20, Z+1	; 0x01
 1d0:	48 17       	cp	r20, r24
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <handleD7+0x2e>
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d1 e0       	ldi	r29, 0x01	; 1
void handleD7(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D7){
			int i = 0;
			for(i = 0; i < 5; i++){
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
				if(currentState->events[index].next == states[i].state){
 1dc:	9f 81       	ldd	r25, Y+7	; 0x07
 1de:	94 13       	cpse	r25, r20
 1e0:	14 c0       	rjmp	.+40     	; 0x20a <handleD7+0x54>
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <handleD7+0x32>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
					*currentState = states[i];
 1e8:	f9 01       	movw	r30, r18
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	e2 1b       	sub	r30, r18
 1f8:	f3 0b       	sbc	r31, r19
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	87 e0       	ldi	r24, 0x07	; 7
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <handleD7+0x4a>
					return;
 208:	0a c0       	rjmp	.+20     	; 0x21e <handleD7+0x68>
void handleD7(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
		if(currentState->events[index].trigger == D7){
			int i = 0;
			for(i = 0; i < 5; i++){
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	27 96       	adiw	r28, 0x07	; 7
 210:	25 30       	cpi	r18, 0x05	; 5
 212:	31 05       	cpc	r19, r1
 214:	19 f7       	brne	.-58     	; 0x1dc <handleD7+0x26>
 216:	32 96       	adiw	r30, 0x02	; 2
	}
}

void handleD7(STATE *currentState){
	int index;
	for(index = 0; index < 3; index++){
 218:	e6 17       	cp	r30, r22
 21a:	f7 07       	cpc	r31, r23
 21c:	a9 f6       	brne	.-86     	; 0x1c8 <handleD7+0x12>
					return;
				}
			}
		}
	}
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <main>:
outputs:	
notes:			Looping forever
Version :    	DMK, Initial code
*******************************************************************/
int main( void )
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	27 97       	sbiw	r28, 0x07	; 7
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
	//DDRD = 0b11111111;			// All pins PORTD are set to output
	DDRE = 0b11111111;	
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	82 b9       	out	0x02, r24	; 2

	STATE currentState = states[0];
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	e0 e0       	ldi	r30, 0x00	; 0
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	de 01       	movw	r26, r28
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x22>

	handleD5(&currentState);
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	43 df       	rcall	.-378    	; 0xda <handleD5>
		}

		


		if(currentState.state == states[4].state){
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	11 e0       	ldi	r17, 0x01	; 1
		}else if(currentState.state == states[1].state){
			PORTE =0x01;
		}else if(currentState.state == states[2].state){
			PORTE = 0x02;
		}else if(currentState.state == states[3].state){
			PORTE = 0x04;
 258:	68 94       	set
 25a:	cc 24       	eor	r12, r12
 25c:	c2 f8       	bld	r12, 2
		}else if(currentState.state == states[0].state){
			PORTE = 0x00;
		}else if(currentState.state == states[1].state){
			PORTE =0x01;
		}else if(currentState.state == states[2].state){
			PORTE = 0x02;
 25e:	68 94       	set
 260:	dd 24       	eor	r13, r13
 262:	d1 f8       	bld	r13, 1
		if(currentState.state == states[4].state){
			PORTE = 0xFF;
		}else if(currentState.state == states[0].state){
			PORTE = 0x00;
		}else if(currentState.state == states[1].state){
			PORTE =0x01;
 264:	ee 24       	eor	r14, r14
 266:	e3 94       	inc	r14

		


		if(currentState.state == states[4].state){
			PORTE = 0xFF;
 268:	ff 24       	eor	r15, r15
 26a:	fa 94       	dec	r15
	

	
	while (1)
	{
		if(PIND & 32){
 26c:	85 9b       	sbis	0x10, 5	; 16
 26e:	04 c0       	rjmp	.+8      	; 0x278 <main+0x54>
			handleD5(&currentState);
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	32 df       	rcall	.-412    	; 0xda <handleD5>
 276:	0b c0       	rjmp	.+22     	; 0x28e <main+0x6a>
		}else if(PIND & 64){
 278:	86 9b       	sbis	0x10, 6	; 16
 27a:	04 c0       	rjmp	.+8      	; 0x284 <main+0x60>
			handleD6(&currentState);
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	63 df       	rcall	.-314    	; 0x148 <handleD6>
 282:	05 c0       	rjmp	.+10     	; 0x28e <main+0x6a>
		}else if(PIND & 128){
 284:	87 9b       	sbis	0x10, 7	; 16
			handleD7(&currentState);
 286:	03 c0       	rjmp	.+6      	; 0x28e <main+0x6a>
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	94 df       	rcall	.-216    	; 0x1b6 <handleD7>
		}

		


		if(currentState.state == states[4].state){
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	f8 01       	movw	r30, r16
 292:	94 8d       	ldd	r25, Z+28	; 0x1c
 294:	89 13       	cpse	r24, r25
 296:	02 c0       	rjmp	.+4      	; 0x29c <main+0x78>
			PORTE = 0xFF;
 298:	f3 b8       	out	0x03, r15	; 3
 29a:	17 c0       	rjmp	.+46     	; 0x2ca <main+0xa6>
		}else if(currentState.state == states[0].state){
 29c:	f8 01       	movw	r30, r16
 29e:	90 81       	ld	r25, Z
 2a0:	89 13       	cpse	r24, r25
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <main+0x84>
			PORTE = 0x00;
 2a4:	13 b8       	out	0x03, r1	; 3
 2a6:	11 c0       	rjmp	.+34     	; 0x2ca <main+0xa6>
		}else if(currentState.state == states[1].state){
 2a8:	f8 01       	movw	r30, r16
 2aa:	97 81       	ldd	r25, Z+7	; 0x07
 2ac:	89 13       	cpse	r24, r25
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <main+0x90>
			PORTE =0x01;
 2b0:	e3 b8       	out	0x03, r14	; 3
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <main+0xa6>
		}else if(currentState.state == states[2].state){
 2b4:	f8 01       	movw	r30, r16
 2b6:	96 85       	ldd	r25, Z+14	; 0x0e
 2b8:	89 13       	cpse	r24, r25
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <main+0x9c>
			PORTE = 0x02;
 2bc:	d3 b8       	out	0x03, r13	; 3
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <main+0xa6>
		}else if(currentState.state == states[3].state){
 2c0:	f8 01       	movw	r30, r16
 2c2:	95 89       	ldd	r25, Z+21	; 0x15
 2c4:	89 13       	cpse	r24, r25
			PORTE = 0x04;
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <main+0xa6>
		}
		wait(100);		
 2c8:	c3 b8       	out	0x03, r12	; 3
 2ca:	84 e6       	ldi	r24, 0x64	; 100
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	f4 de       	rcall	.-536    	; 0xb8 <wait>
	}
 2d0:	cd cf       	rjmp	.-102    	; 0x26c <main+0x48>

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
